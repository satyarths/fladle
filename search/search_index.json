{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Fladle The Gradle Plugin for Firebase Test Lab and Flank . Fladle is the easiest way to scale your instrumentation tests using Firebase Test Lab. Apply the gradle plugin and runFlank ! You can easily run many hours of instrumentation tests using hundreds of devices in Test Lab and get the results in just few minutes. Fladle simplifies the configuration necessary to scale your tests using Firebase Test Lab and Flank. Fladle is mentioned in Fragmented Podcast #163 . Skip to ~29 minutes. New? Get Started Here Flank Flank is a parallel test runner for Firebase Test Lab . Also read this medium post .","title":"Home"},{"location":"#welcome-to-fladle","text":"The Gradle Plugin for Firebase Test Lab and Flank . Fladle is the easiest way to scale your instrumentation tests using Firebase Test Lab. Apply the gradle plugin and runFlank ! You can easily run many hours of instrumentation tests using hundreds of devices in Test Lab and get the results in just few minutes. Fladle simplifies the configuration necessary to scale your tests using Firebase Test Lab and Flank. Fladle is mentioned in Fragmented Podcast #163 . Skip to ~29 minutes.","title":"Welcome to Fladle"},{"location":"#new-get-started-here","text":"","title":"New? Get Started Here"},{"location":"#flank","text":"Flank is a parallel test runner for Firebase Test Lab . Also read this medium post .","title":"Flank"},{"location":"changelog/","text":"Changelog 0.10.2 Update Flank to 20.06.2 . Fix duplicated status messages in console. PR Thanks francescocervone Breaking API change Add time units for timeout. timeoutMin has been renamed to testTimeout . PR Thanks pawelpasterz 0.10.1 [Fix] Allow for specifying roboScript without specifying instrumentationApk. Fixes #128 . 0.10.0 Allow for debugging using --dump-shards Fix naming for variant discovery of apk and instrumentation apk. Instead of chocolate-debug, variant must now be set as chocolateDebug. Update Flank to 20.05.2 . Fulladle Preview Breaking API Change additionalTestApks now uses ListProperty instead of the previous Map. This is to allow for lazy configuration of the provided files. Warning Minimum supported Gradle version is now 5.4. 0.9.4 Update Flank to 20.05.1 . Huge new release! Add support for new flank flags. Thanks pawelpasterz PR Use compileOnly for AGP version. 0.9.2 Breaking API change debugApk and instrumentationApk now use Lazy Property API to avoid resolving at configuration time. 0.9.1 Bugfix: ability to set flank version. PR Breaking API Change serviceAccountCredentials now uses Lazy Property API . See Configuration for details on how to set it. PR Warning Minimum required Gradle Version is now 5.1. Warning Dropped support for Flank 7.X and lower. 0.9.0 Do not add flank maven repo. PR Allow specifying custom flank coordinates. PR Change ordering and use file provider. PR 0.8.1 Add support for additionalTestApks . PR Thanks japplin . Add support for resultsDir . PR 0.8.0 BREAKING: devices now takes a List<Map<String, String>> instead of a List<Device> . See the [#README.md] for an example. PR Thanks zlippard . Add support for keep-file-path . PR Thanks tahirhajizada . 0.7.0 Add support for Flank 8 and bump version. PR Thanks francescocervone 0.6.7 Allow using wildcards in debugApk or instrumentationApk path by not checking that file exists. PR 0.6.6 Bump flank version to 7.0.0 Publish to mavenCentral() 0.6.5 Add support for results-bucket gcloud config option. PR Thanks c-moss Default flank version 6.2.3 Lower build logging level 0.6.4 Allow setting android version number as string to allow for preview versions. PR Thanks JeroenMols . 0.6.3 Allow service credentials to be set using environment variables . Fixes #55 Fix not being able to set flankVersion . Fixes #56 0.6.2 Fix shardTime config property not written to flank.yml Thanks nnoel-grubhub 0.6.1 Fix project id spacing Thanks andersu for reporting. 0.6.0 Default flank version 5.0.1 Rename yaml output to match new flank version. Add support for shard time. 0.5.2 Improve error messages for missing arguments in the fladle extension. 0.5.1 Test multipleconfig to actually write yml Thanks PR winterDroid . JavaExec uses classpath instead of jar directly. Thanks PR winterDroid . 0.5.0 Use flank as a maven artifact. Group Fladle Tasks 0.4.1 Detect AndroidX test orchestrator Fix detection of debug and instrumentation apk paths. 0.4.0 Add support for all configuration options. Thanks PR winterDroid . Breaking Changes: Previous users of clearPackageData = true will now need to use: environmentVariables = [ \"clearPackageData\": \"true\" ] 0.3.8 Fix broken flakyTestAttempts. 0.3.7 Add support for flakyTestAttempts. 0.3.6 Add support for environment variable clearPackageData. Thanks @anderssu ! 0.3.5 Automatically configure the use of test orchestrator. 0.3.4 Add support for setting results-history-name. Add support for selecting variant to test instead of apk path. 0.3.3 Add support for setting smartFlankGcsPath Capitalize task names. 0.3.2 Actually fix gradle download task bug. 0.3.1 Maybe fix bug similar to: https://github.com/michel-kraemer/gradle-download-task/issues/58 0.3.0 Add support for multiple test configurations. 0.2.12 Fix broken flankDoctor task. 0.2.11 Add minimum Gradle version check. (4.9 is required because we use the lazy task configuration API)) 0.2.10 Add support for specifying Flank snapshot versions. See README for configuration options. 0.2.9 Add support for multiple build targets. PR . Thanks winterDroid . Add support for testShards and repeatTests flank options. See README for configuration options.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#0102","text":"Update Flank to 20.06.2 . Fix duplicated status messages in console. PR Thanks francescocervone Breaking API change Add time units for timeout. timeoutMin has been renamed to testTimeout . PR Thanks pawelpasterz","title":"0.10.2"},{"location":"changelog/#0101","text":"[Fix] Allow for specifying roboScript without specifying instrumentationApk. Fixes #128 .","title":"0.10.1"},{"location":"changelog/#0100","text":"Allow for debugging using --dump-shards Fix naming for variant discovery of apk and instrumentation apk. Instead of chocolate-debug, variant must now be set as chocolateDebug. Update Flank to 20.05.2 . Fulladle Preview Breaking API Change additionalTestApks now uses ListProperty instead of the previous Map. This is to allow for lazy configuration of the provided files. Warning Minimum supported Gradle version is now 5.4.","title":"0.10.0"},{"location":"changelog/#094","text":"Update Flank to 20.05.1 . Huge new release! Add support for new flank flags. Thanks pawelpasterz PR Use compileOnly for AGP version.","title":"0.9.4"},{"location":"changelog/#092","text":"Breaking API change debugApk and instrumentationApk now use Lazy Property API to avoid resolving at configuration time.","title":"0.9.2"},{"location":"changelog/#091","text":"Bugfix: ability to set flank version. PR Breaking API Change serviceAccountCredentials now uses Lazy Property API . See Configuration for details on how to set it. PR Warning Minimum required Gradle Version is now 5.1. Warning Dropped support for Flank 7.X and lower.","title":"0.9.1"},{"location":"changelog/#090","text":"Do not add flank maven repo. PR Allow specifying custom flank coordinates. PR Change ordering and use file provider. PR","title":"0.9.0"},{"location":"changelog/#081","text":"Add support for additionalTestApks . PR Thanks japplin . Add support for resultsDir . PR","title":"0.8.1"},{"location":"changelog/#080","text":"BREAKING: devices now takes a List<Map<String, String>> instead of a List<Device> . See the [#README.md] for an example. PR Thanks zlippard . Add support for keep-file-path . PR Thanks tahirhajizada .","title":"0.8.0"},{"location":"changelog/#070","text":"Add support for Flank 8 and bump version. PR Thanks francescocervone","title":"0.7.0"},{"location":"changelog/#067","text":"Allow using wildcards in debugApk or instrumentationApk path by not checking that file exists. PR","title":"0.6.7"},{"location":"changelog/#066","text":"Bump flank version to 7.0.0 Publish to mavenCentral()","title":"0.6.6"},{"location":"changelog/#065","text":"Add support for results-bucket gcloud config option. PR Thanks c-moss Default flank version 6.2.3 Lower build logging level","title":"0.6.5"},{"location":"changelog/#064","text":"Allow setting android version number as string to allow for preview versions. PR Thanks JeroenMols .","title":"0.6.4"},{"location":"changelog/#063","text":"Allow service credentials to be set using environment variables . Fixes #55 Fix not being able to set flankVersion . Fixes #56","title":"0.6.3"},{"location":"changelog/#062","text":"Fix shardTime config property not written to flank.yml Thanks nnoel-grubhub","title":"0.6.2"},{"location":"changelog/#061","text":"Fix project id spacing Thanks andersu for reporting.","title":"0.6.1"},{"location":"changelog/#060","text":"Default flank version 5.0.1 Rename yaml output to match new flank version. Add support for shard time.","title":"0.6.0"},{"location":"changelog/#052","text":"Improve error messages for missing arguments in the fladle extension.","title":"0.5.2"},{"location":"changelog/#051","text":"Test multipleconfig to actually write yml Thanks PR winterDroid . JavaExec uses classpath instead of jar directly. Thanks PR winterDroid .","title":"0.5.1"},{"location":"changelog/#050","text":"Use flank as a maven artifact. Group Fladle Tasks","title":"0.5.0"},{"location":"changelog/#041","text":"Detect AndroidX test orchestrator Fix detection of debug and instrumentation apk paths.","title":"0.4.1"},{"location":"changelog/#040","text":"Add support for all configuration options. Thanks PR winterDroid .","title":"0.4.0"},{"location":"changelog/#breaking-changes","text":"Previous users of clearPackageData = true will now need to use: environmentVariables = [ \"clearPackageData\": \"true\" ]","title":"Breaking Changes:"},{"location":"changelog/#038","text":"Fix broken flakyTestAttempts.","title":"0.3.8"},{"location":"changelog/#037","text":"Add support for flakyTestAttempts.","title":"0.3.7"},{"location":"changelog/#036","text":"Add support for environment variable clearPackageData. Thanks @anderssu !","title":"0.3.6"},{"location":"changelog/#035","text":"Automatically configure the use of test orchestrator.","title":"0.3.5"},{"location":"changelog/#034","text":"Add support for setting results-history-name. Add support for selecting variant to test instead of apk path.","title":"0.3.4"},{"location":"changelog/#033","text":"Add support for setting smartFlankGcsPath Capitalize task names.","title":"0.3.3"},{"location":"changelog/#032","text":"Actually fix gradle download task bug.","title":"0.3.2"},{"location":"changelog/#031","text":"Maybe fix bug similar to: https://github.com/michel-kraemer/gradle-download-task/issues/58","title":"0.3.1"},{"location":"changelog/#030","text":"Add support for multiple test configurations.","title":"0.3.0"},{"location":"changelog/#0212","text":"Fix broken flankDoctor task.","title":"0.2.12"},{"location":"changelog/#0211","text":"Add minimum Gradle version check. (4.9 is required because we use the lazy task configuration API))","title":"0.2.11"},{"location":"changelog/#0210","text":"Add support for specifying Flank snapshot versions. See README for configuration options.","title":"0.2.10"},{"location":"changelog/#029","text":"Add support for multiple build targets. PR . Thanks winterDroid . Add support for testShards and repeatTests flank options. See README for configuration options.","title":"0.2.9"},{"location":"configuration/","text":"Configuration The following configuration options must be set inside the fladle block. See the sample configuration below. There is also a groovy sample and a kotlin sample . serviceAccountCredentials serviceAccountCredentials is the only required field in the Fladle configuration. The service account credential is a file which contains authentication credentials for a service account created in the Google Cloud Platform Console. It can be created with the editor role here . Instructions on how to create this account can be found here . Optionally, the serviceAccountCredentials can be set with environment variables but then the projectId parameter must be set. variant Note variant must be set if using buildFlavors in order to automatically configure the debugApk and testApk. Set the variant to automatically configure for testing. A build variant is a combination of buildFlavor and buildType. This must also be set when testing against a non-default variant. For example: 'debug' or 'freeDebug'. Put this inside your Fladle block. Groovy variant = \"freeDebug\" Kotlin variant . set ( \"freeDebug\" ) Sample Configuration fladle { // Required parameters serviceAccountCredentials = project . layout . projectDirectory . file ( \"flank-gradle-5cf02dc90531.json\" ) variant = \"freeDebug\" // Optional parameters useOrchestrator = false environmentVariables = [ \"clearPackageData\" : \"true\" ] directoriesToPull = [ \"/sdcard/screenshots\" ] filesToDownload = [ \".*/screenshots/.*\" ] testTargets = [ \"class com.osacky.flank.gradle.sample.ExampleInstrumentedTest#seeView\" ] testTimeout = \"15m\" recordVideo = false performanceMetrics = false devices = [ [ \"model\" : \"NexusLowRes\" , \"version\" : \"28\" ], [ \"model\" : \"Nexus5\" , \"version\" : \"23\" ] ] projectId ( \"flank-gradle\" ) flankVersion = \"20.02.2\" debugApk = \"$buildDir/outputs/apk/debug/sample-debug.apk\" instrumentationApk = \"$buildDir/outputs/apk/androidTest/debug/sample-debug-androidTest.apk\" additionalTestApks = [ \"- app: \" $buildDir /outputs/ apk /debug/ sample - debug . apk \", \" test: $buildDir /outputs/ apk /androidTest/ debug /sample2-debug-androidTest.apk\", \"- test: ${rootProject.buildDir}/ database /module/ outputs /apk/ database - module - androidTest . apk \" ] autoGoogleLogin = true testShards = 5 //or numUniformShards=5 cannot use both shardTime = 120 smartFlankGcsPath = \" gs: //tmp_flank/flank/test_app_android.xml\" configs { oranges { useOrchestrator = false testTargets = [ \"class com.osacky.flank.gradle.sample.ExampleInstrumentedTest#runAndFail\" ] } } resultsBucket ( \"my-results-bucket-name\" ) keepFilePath = true runTimout = 45 m ignoreFailedTests = false disableSharding = false smartFlankDisableUpload = false testRunnerClass = \"com.foo.TestRunner\" localResultsDir = \"flank\" clientDetails = [ \"key1\" : \"value1\" , \"key2\" : \"value2\" ] testTargetsAlwaysRun = [ \"com.example.TestSuite#test1\" , \"com.example.TestSuite#test2\" ] otherFiles = [ \"/sdcard/dir1/file1.txt\" : \"/my/example/path/file1.txt\" , \"/sdcard/dir2/file2.txt\" : \"/my/example/path/file2.txt\" ] networkProfile = \"LTE\" roboDirectives = [ [ \"click\" , \"button1\" , \"\" ], [ \"ignore\" , \"button2\" ], [ \"text\" , \"field1\" , \"my text\" ], ] outputStyle = 'multi' } useOrchestrator Whether or not we should use the android test orchestrator to run this tests. Set this to true when the build.gradle file includes testOptions.execution 'ANDROID_TEST_ORCHESTRATOR' testTargets Set multiple testTargets to be run by Flank. These are used to whitelist or blacklist test classes, test cases and test annotations. See Google Cloud Firebase docs for more information. devices A list of devices to run the tests against. When list is empty, a default device will be used. Each device entry is a map. The valid keys in the map are model , version , orientation , and locale . When a key is not set or is null, a default value will be used. projectId The projectId is a unique identifier which can be found in the project's URL: https://console.firebase.google.com/project/<projectId> This is automatically discovered based on the service credential by default. flankVersion Need a different Flank version? Specify it with flankVersion . Groovy flankVersion = \"flank_snapshot\" ` Kotlin flankVersion . set ( \"flank_snapshot\" ) Need more than 50 shards? Use Flank 8.1.0 . Groovy flankVersion = \"20.02.2\" Kotlin flankVersion . set ( \"20.02.2\" ) flankCoordinates flankCoordinates = \"com.github.flank:flank\" to specify custom flank coordinates. debugApk This is a string representing the path to the app's debug apk. Supports wildcard characters. Optional, prefer to set variant . Groovy debugApk = project . provider { \"${buildDir.toString()}/outputs/apk/debug/*.apk\" } Kotlin debugApk . set ( project . provider { \"${buildDir.toString()}/outputs/apk/debug/*.apk\" }) instrumentationApk This is a string representing the path to the app's instrumentaiton apk. Supports wildcard characters. Optional, prefer to set variant . InstrumenationApk should not be set when using roboScript . Groovy debugApk = project . provider { \"${buildDir.toString()}/outputs/apk/androidTest/debug/*.apk\" } Kotlin debugApk . set ( project . provider { \"${buildDir.toString()}/outputs/apk/androidTest/debug/*.apk\" }) additionalTestApks Paths to additional test configurations. Order matters. A test apk is run with the nearest previous listed app apk. For library modules, add them to the list with a - test: in front. For test apks which belong to an application module, add them with test: . It is not required to list an app apk here. If there is no app apk listed in additionalTestApks, the test apks are run against the debugApk . Groovy additionalTestApks . value ( project . provider { [ \"- app: ../main/app/build/output/apk/debug/app.apk\" , \" test: ../main/app/build/output/apk/androidTest/debug/app-test.apk\" , \"- app: ../sample/app/build/output/apk/debug/sample-app.apk\" , \" test: ../sample/app/build/output/apk/androidTest/debug/sample-app-test.apk\" , \"- test: ../feature/room/build/output/apk/androidTest/debug/feature-room-test.apk\" , \"- test: ../library/databases/build/output/apk/androidTest/debug/sample-databases-test.apk\" ]}) Kotlin additionalTestApks . value ( project . provider { listOf ( \"- app: ../main/app/build/output/apk/debug/app.apk\" , \" test: ../main/app/build/output/apk/androidTest/debug/app-test.apk\" , \"- app: ../sample/app/build/output/apk/debug/sample-app.apk\" , \" test: ../sample/app/build/output/apk/androidTest/debug/sample-app-test.apk\" , \"- test: ../feature/room/build/output/apk/androidTest/debug/feature-room-test.apk\" , \"- test: ../library/databases/build/output/apk/androidTest/debug/sample-databases-test.apk\" )}) autoGoogleLogin Whether or not to automatically log in using a preconfigured google account. More Info environmentVariables Environment variables are mirrored as extra options to the am instrument -e KEY1 VALUE1 \u2026 command and passed to your test runner (typically AndroidJUnitRunner). Examples environmentVariables = [ \"clearPackageData\": \"true\" // Whether or not to remove all shared state from your device's CPU and memory after each test. [More info](https://developer.android.com/training/testing/junit-runner) ] testShards Overrides the number of automatically determined test shards for Flank to use. Uses Flanks default value when not specified. shardTime The amount of time tests within a shard should take. When set to > 0, the shard count is dynamically set based on time up to the maximmum limit defined by maxTestShards 2 minutes (120) is recommended. default: -1 (unlimited) repeatTests The number of times to repeat each test. Uses Flanks default value when not specified. configs Give a name to a custom flank task and configure its options. The name is appended to the end of the flank task. For example runFlank becomes runFlank<name> . smartFlankGcsPath Shard Android tests by time using historical run data. The amount of shards used is set by testShards . flakyTestAttempts The number of times to retry failed tests. Default is 0. Max is 10. directoriesToPull A list of paths that will be copied from the device's storage to the designated results bucket after the test is complete. These must be absolute paths under /sdcard or /data/local/tmp . Path names are restricted to the characters a-zA-Z0-9_-./+ . The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device. Groovy directoriesToPull = [ '/sdcard/tempDir1' , '/data/local/tmp/tempDir2' ] Kotlin directoriesToPull = listOf ( \"/sdcard/tempDir1\" , \"/data/local/tmp/tempDir2\" ) filesToDownload List of regex that is matched against bucket paths (for example: 2019-01-09_00:13:06.106000_YCKl/shard_0/NexusLowRes-28-en-portrait/bugreport.txt ) for files to be downloaded after a flank run. The results are downloaded to the APP_MODULE/build/fladle/RESULTS directory where RESULTS can be set by localResultsDir var otherwise defaulting to results/ . Groovy filesToDownload = [ '.*/sdcard/tempDir1/.*' , '.*/data/local/tmp/tempDir2/.*' ] Kotlin filesToDownload = listOf ( \".*/sdcard/tempDir1/.*\" , \".*/data/local/tmp/tempDir2/.*\" ) testTimeout The max time test execution can run before it is cancelled (default: 15m). It does not include any time necessary to prepare and clean up the target device. The maximum possible testing time is 45m on physical devices and 60m on virtual devices. The TIMEOUT units can be h, m, or s. If no unit is given, seconds are assumed. Examples: * 1h -> 1 hour * 5m -> 5 minutes * 200s -> 200 seconds * 100 -> 100 seconds Groovy testTimeout = \"1h\" Kotlin testTimeout = \"1h\" recordVideo Enable video recording during the test. Enabled by default. performanceMetrics Monitor and record performance metrics: CPU, memory, network usage, and FPS (game-loop only). Enabled by default. resultsBucket The name of a Google Cloud Storage bucket where raw test results will be stored. keepFilePath Keeps the full path of downloaded files from a Google Cloud Storage bucket. Required when file names are not unique. Disabled by default. resultsDir The name of a unique Google Cloud Storage object within the results bucket where raw test results will be stored. The default is a timestamp with a random suffix. disableSharding Disables sharding. All tests will run on the same device. Useful for parameterized tests which do not support sharding. (default: false) smartFlankDisableUpload Disables smart flank JUnit XML uploading. Useful for preventing timing data from being updated. (default: false) What is Smart Flank? testRunnerClass The fully-qualified Java class name of the instrumentation test runner (default: the test manifest is parsed to determine the class name). localResultsDir The local directory to store the test results. Folder is DELETED before each run to ensure only artifacts from the new run are saved. testTargetsAlwaysRun Always run - these tests are inserted at the beginning of every shard. Useful if you need to grant permissions or login before other tests run The flags below are only available with Flank 20.05.0 or higher. runTimeout The max time this test run can execute before it is cancelled. s (seconds), m (minutes), h (hours) suffixes are acceptable, mixes like 1h45m are currently not supported (default: unlimited). Examples: 20, 20s -> 20 seconds 30m -> 30 minutes 2h -> 2 hours ignoreFailedTests Always return successful task completion even when there are failed tests. Useful when parsing JUnit XML to determine failure. (default: false) numUniformShards Specifies the number of shards into which you want to evenly distribute test cases. The shards are run in parallel on separate devices. For example, if your test execution contains 20 test cases and you specify four shards, each shard executes five test cases. The number of shards should be less than the total number of test cases. The number of shards specified must be >= 1 and <= 50. This option cannot be used along max-test-shards and is not compatible with smart sharding ( Smart Flank ). If you want to take benefits of smart sharding use max-test-shards instead. (default: null) clientDetails A key-value map of additional details to attach to the test matrix.( clientDetails in Google Cloud Docs ) Arbitrary key-value pairs may be attached to a test matrix to provide additional context about the tests being run. When consuming the test results, such as in Cloud Functions or a CI system, these details can add additional context such as a link to the corresponding pull request. ( Access Client Details ) otherFiles A list of device-path: file-path pairs that indicate the device paths to push files to the device before starting tests, and the paths of files to push. Device paths must be under absolute, whitelisted paths (${EXTERNAL_STORAGE}, or ${ANDROID_DATA}/local/tmp). Source file paths may be in the local filesystem or in Google Cloud Storage (gs://\u2026). networkProfile The name of the network traffic profile, for example LTE, HSPA, etc, which consists of a set of parameters to emulate network conditions when running the test (default: no network shaping; see available profiles listed by the flank test network-profiles list command). This feature only works on physical devices. roboScript The path to a Robo Script JSON file. The path may be in the local filesystem or in Google Cloud Storage using gs:// notation. You can guide the Robo test to perform specific actions by recording a Robo Script in Android Studio and then specifying this argument. Learn more at DOCS . roboDirectives List of robo_directives that you can use to customize the behavior of Robo test. The type specifies the action type of the directive, which may take on values click, text or ignore. Each directive is list of String = [type, key, value]. Each key should be the Android resource name of a target UI element and each value should be the text input for that element. Values are only permitted for text type elements, so no value should be specified for click and ignore type elements. outputStyle Output style of execution status. May be one of [ verbose , multi , single ]. For runs with only one test execution the default value is 'verbose', in other cases 'multi' is used as the default. The output style 'multi' is not displayed correctly on consoles which don't support ansi codes, to avoid corrupted output use single or verbose. multi displays separated status for each shard execution in separated line, lines are updated over time. Similar to gradle output when running multiple tasks in parallel. Requires ANSI codes support. single displays shortened status of all executions in single line. Similar to gcloud output when running with sharding. Should work on any console. Default value is single. Groovy outputSyle = \"single\" Kotlin outputStyle . set ( \"single\" )","title":"Configuration"},{"location":"configuration/#configuration","text":"The following configuration options must be set inside the fladle block. See the sample configuration below. There is also a groovy sample and a kotlin sample .","title":"Configuration"},{"location":"configuration/#serviceaccountcredentials","text":"serviceAccountCredentials is the only required field in the Fladle configuration. The service account credential is a file which contains authentication credentials for a service account created in the Google Cloud Platform Console. It can be created with the editor role here . Instructions on how to create this account can be found here . Optionally, the serviceAccountCredentials can be set with environment variables but then the projectId parameter must be set.","title":"serviceAccountCredentials"},{"location":"configuration/#variant","text":"Note variant must be set if using buildFlavors in order to automatically configure the debugApk and testApk. Set the variant to automatically configure for testing. A build variant is a combination of buildFlavor and buildType. This must also be set when testing against a non-default variant. For example: 'debug' or 'freeDebug'. Put this inside your Fladle block. Groovy variant = \"freeDebug\" Kotlin variant . set ( \"freeDebug\" )","title":"variant"},{"location":"configuration/#sample-configuration","text":"fladle { // Required parameters serviceAccountCredentials = project . layout . projectDirectory . file ( \"flank-gradle-5cf02dc90531.json\" ) variant = \"freeDebug\" // Optional parameters useOrchestrator = false environmentVariables = [ \"clearPackageData\" : \"true\" ] directoriesToPull = [ \"/sdcard/screenshots\" ] filesToDownload = [ \".*/screenshots/.*\" ] testTargets = [ \"class com.osacky.flank.gradle.sample.ExampleInstrumentedTest#seeView\" ] testTimeout = \"15m\" recordVideo = false performanceMetrics = false devices = [ [ \"model\" : \"NexusLowRes\" , \"version\" : \"28\" ], [ \"model\" : \"Nexus5\" , \"version\" : \"23\" ] ] projectId ( \"flank-gradle\" ) flankVersion = \"20.02.2\" debugApk = \"$buildDir/outputs/apk/debug/sample-debug.apk\" instrumentationApk = \"$buildDir/outputs/apk/androidTest/debug/sample-debug-androidTest.apk\" additionalTestApks = [ \"- app: \" $buildDir /outputs/ apk /debug/ sample - debug . apk \", \" test: $buildDir /outputs/ apk /androidTest/ debug /sample2-debug-androidTest.apk\", \"- test: ${rootProject.buildDir}/ database /module/ outputs /apk/ database - module - androidTest . apk \" ] autoGoogleLogin = true testShards = 5 //or numUniformShards=5 cannot use both shardTime = 120 smartFlankGcsPath = \" gs: //tmp_flank/flank/test_app_android.xml\" configs { oranges { useOrchestrator = false testTargets = [ \"class com.osacky.flank.gradle.sample.ExampleInstrumentedTest#runAndFail\" ] } } resultsBucket ( \"my-results-bucket-name\" ) keepFilePath = true runTimout = 45 m ignoreFailedTests = false disableSharding = false smartFlankDisableUpload = false testRunnerClass = \"com.foo.TestRunner\" localResultsDir = \"flank\" clientDetails = [ \"key1\" : \"value1\" , \"key2\" : \"value2\" ] testTargetsAlwaysRun = [ \"com.example.TestSuite#test1\" , \"com.example.TestSuite#test2\" ] otherFiles = [ \"/sdcard/dir1/file1.txt\" : \"/my/example/path/file1.txt\" , \"/sdcard/dir2/file2.txt\" : \"/my/example/path/file2.txt\" ] networkProfile = \"LTE\" roboDirectives = [ [ \"click\" , \"button1\" , \"\" ], [ \"ignore\" , \"button2\" ], [ \"text\" , \"field1\" , \"my text\" ], ] outputStyle = 'multi' }","title":"Sample Configuration"},{"location":"configuration/#useorchestrator","text":"Whether or not we should use the android test orchestrator to run this tests. Set this to true when the build.gradle file includes testOptions.execution 'ANDROID_TEST_ORCHESTRATOR'","title":"useOrchestrator"},{"location":"configuration/#testtargets","text":"Set multiple testTargets to be run by Flank. These are used to whitelist or blacklist test classes, test cases and test annotations. See Google Cloud Firebase docs for more information.","title":"testTargets"},{"location":"configuration/#devices","text":"A list of devices to run the tests against. When list is empty, a default device will be used. Each device entry is a map. The valid keys in the map are model , version , orientation , and locale . When a key is not set or is null, a default value will be used.","title":"devices"},{"location":"configuration/#projectid","text":"The projectId is a unique identifier which can be found in the project's URL: https://console.firebase.google.com/project/<projectId> This is automatically discovered based on the service credential by default.","title":"projectId"},{"location":"configuration/#flankversion","text":"Need a different Flank version? Specify it with flankVersion . Groovy flankVersion = \"flank_snapshot\" ` Kotlin flankVersion . set ( \"flank_snapshot\" ) Need more than 50 shards? Use Flank 8.1.0 . Groovy flankVersion = \"20.02.2\" Kotlin flankVersion . set ( \"20.02.2\" )","title":"flankVersion"},{"location":"configuration/#flankcoordinates","text":"flankCoordinates = \"com.github.flank:flank\" to specify custom flank coordinates.","title":"flankCoordinates"},{"location":"configuration/#debugapk","text":"This is a string representing the path to the app's debug apk. Supports wildcard characters. Optional, prefer to set variant . Groovy debugApk = project . provider { \"${buildDir.toString()}/outputs/apk/debug/*.apk\" } Kotlin debugApk . set ( project . provider { \"${buildDir.toString()}/outputs/apk/debug/*.apk\" })","title":"debugApk"},{"location":"configuration/#instrumentationapk","text":"This is a string representing the path to the app's instrumentaiton apk. Supports wildcard characters. Optional, prefer to set variant . InstrumenationApk should not be set when using roboScript . Groovy debugApk = project . provider { \"${buildDir.toString()}/outputs/apk/androidTest/debug/*.apk\" } Kotlin debugApk . set ( project . provider { \"${buildDir.toString()}/outputs/apk/androidTest/debug/*.apk\" })","title":"instrumentationApk"},{"location":"configuration/#additionaltestapks","text":"Paths to additional test configurations. Order matters. A test apk is run with the nearest previous listed app apk. For library modules, add them to the list with a - test: in front. For test apks which belong to an application module, add them with test: . It is not required to list an app apk here. If there is no app apk listed in additionalTestApks, the test apks are run against the debugApk . Groovy additionalTestApks . value ( project . provider { [ \"- app: ../main/app/build/output/apk/debug/app.apk\" , \" test: ../main/app/build/output/apk/androidTest/debug/app-test.apk\" , \"- app: ../sample/app/build/output/apk/debug/sample-app.apk\" , \" test: ../sample/app/build/output/apk/androidTest/debug/sample-app-test.apk\" , \"- test: ../feature/room/build/output/apk/androidTest/debug/feature-room-test.apk\" , \"- test: ../library/databases/build/output/apk/androidTest/debug/sample-databases-test.apk\" ]}) Kotlin additionalTestApks . value ( project . provider { listOf ( \"- app: ../main/app/build/output/apk/debug/app.apk\" , \" test: ../main/app/build/output/apk/androidTest/debug/app-test.apk\" , \"- app: ../sample/app/build/output/apk/debug/sample-app.apk\" , \" test: ../sample/app/build/output/apk/androidTest/debug/sample-app-test.apk\" , \"- test: ../feature/room/build/output/apk/androidTest/debug/feature-room-test.apk\" , \"- test: ../library/databases/build/output/apk/androidTest/debug/sample-databases-test.apk\" )})","title":"additionalTestApks"},{"location":"configuration/#autogooglelogin","text":"Whether or not to automatically log in using a preconfigured google account. More Info","title":"autoGoogleLogin"},{"location":"configuration/#environmentvariables","text":"Environment variables are mirrored as extra options to the am instrument -e KEY1 VALUE1 \u2026 command and passed to your test runner (typically AndroidJUnitRunner). Examples environmentVariables = [ \"clearPackageData\": \"true\" // Whether or not to remove all shared state from your device's CPU and memory after each test. [More info](https://developer.android.com/training/testing/junit-runner) ]","title":"environmentVariables"},{"location":"configuration/#testshards","text":"Overrides the number of automatically determined test shards for Flank to use. Uses Flanks default value when not specified.","title":"testShards"},{"location":"configuration/#shardtime","text":"The amount of time tests within a shard should take. When set to > 0, the shard count is dynamically set based on time up to the maximmum limit defined by maxTestShards 2 minutes (120) is recommended. default: -1 (unlimited)","title":"shardTime"},{"location":"configuration/#repeattests","text":"The number of times to repeat each test. Uses Flanks default value when not specified.","title":"repeatTests"},{"location":"configuration/#configs","text":"Give a name to a custom flank task and configure its options. The name is appended to the end of the flank task. For example runFlank becomes runFlank<name> .","title":"configs"},{"location":"configuration/#smartflankgcspath","text":"Shard Android tests by time using historical run data. The amount of shards used is set by testShards .","title":"smartFlankGcsPath"},{"location":"configuration/#flakytestattempts","text":"The number of times to retry failed tests. Default is 0. Max is 10.","title":"flakyTestAttempts"},{"location":"configuration/#directoriestopull","text":"A list of paths that will be copied from the device's storage to the designated results bucket after the test is complete. These must be absolute paths under /sdcard or /data/local/tmp . Path names are restricted to the characters a-zA-Z0-9_-./+ . The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device. Groovy directoriesToPull = [ '/sdcard/tempDir1' , '/data/local/tmp/tempDir2' ] Kotlin directoriesToPull = listOf ( \"/sdcard/tempDir1\" , \"/data/local/tmp/tempDir2\" )","title":"directoriesToPull"},{"location":"configuration/#filestodownload","text":"List of regex that is matched against bucket paths (for example: 2019-01-09_00:13:06.106000_YCKl/shard_0/NexusLowRes-28-en-portrait/bugreport.txt ) for files to be downloaded after a flank run. The results are downloaded to the APP_MODULE/build/fladle/RESULTS directory where RESULTS can be set by localResultsDir var otherwise defaulting to results/ . Groovy filesToDownload = [ '.*/sdcard/tempDir1/.*' , '.*/data/local/tmp/tempDir2/.*' ] Kotlin filesToDownload = listOf ( \".*/sdcard/tempDir1/.*\" , \".*/data/local/tmp/tempDir2/.*\" )","title":"filesToDownload"},{"location":"configuration/#testtimeout","text":"The max time test execution can run before it is cancelled (default: 15m). It does not include any time necessary to prepare and clean up the target device. The maximum possible testing time is 45m on physical devices and 60m on virtual devices. The TIMEOUT units can be h, m, or s. If no unit is given, seconds are assumed. Examples: * 1h -> 1 hour * 5m -> 5 minutes * 200s -> 200 seconds * 100 -> 100 seconds Groovy testTimeout = \"1h\" Kotlin testTimeout = \"1h\"","title":"testTimeout"},{"location":"configuration/#recordvideo","text":"Enable video recording during the test. Enabled by default.","title":"recordVideo"},{"location":"configuration/#performancemetrics","text":"Monitor and record performance metrics: CPU, memory, network usage, and FPS (game-loop only). Enabled by default.","title":"performanceMetrics"},{"location":"configuration/#resultsbucket","text":"The name of a Google Cloud Storage bucket where raw test results will be stored.","title":"resultsBucket"},{"location":"configuration/#keepfilepath","text":"Keeps the full path of downloaded files from a Google Cloud Storage bucket. Required when file names are not unique. Disabled by default.","title":"keepFilePath"},{"location":"configuration/#resultsdir","text":"The name of a unique Google Cloud Storage object within the results bucket where raw test results will be stored. The default is a timestamp with a random suffix.","title":"resultsDir"},{"location":"configuration/#disablesharding","text":"Disables sharding. All tests will run on the same device. Useful for parameterized tests which do not support sharding. (default: false)","title":"disableSharding"},{"location":"configuration/#smartflankdisableupload","text":"Disables smart flank JUnit XML uploading. Useful for preventing timing data from being updated. (default: false) What is Smart Flank?","title":"smartFlankDisableUpload"},{"location":"configuration/#testrunnerclass","text":"The fully-qualified Java class name of the instrumentation test runner (default: the test manifest is parsed to determine the class name).","title":"testRunnerClass"},{"location":"configuration/#localresultsdir","text":"The local directory to store the test results. Folder is DELETED before each run to ensure only artifacts from the new run are saved.","title":"localResultsDir"},{"location":"configuration/#testtargetsalwaysrun","text":"Always run - these tests are inserted at the beginning of every shard. Useful if you need to grant permissions or login before other tests run The flags below are only available with Flank 20.05.0 or higher.","title":"testTargetsAlwaysRun"},{"location":"configuration/#runtimeout","text":"The max time this test run can execute before it is cancelled. s (seconds), m (minutes), h (hours) suffixes are acceptable, mixes like 1h45m are currently not supported (default: unlimited). Examples: 20, 20s -> 20 seconds 30m -> 30 minutes 2h -> 2 hours","title":"runTimeout"},{"location":"configuration/#ignorefailedtests","text":"Always return successful task completion even when there are failed tests. Useful when parsing JUnit XML to determine failure. (default: false)","title":"ignoreFailedTests"},{"location":"configuration/#numuniformshards","text":"Specifies the number of shards into which you want to evenly distribute test cases. The shards are run in parallel on separate devices. For example, if your test execution contains 20 test cases and you specify four shards, each shard executes five test cases. The number of shards should be less than the total number of test cases. The number of shards specified must be >= 1 and <= 50. This option cannot be used along max-test-shards and is not compatible with smart sharding ( Smart Flank ). If you want to take benefits of smart sharding use max-test-shards instead. (default: null)","title":"numUniformShards"},{"location":"configuration/#clientdetails","text":"A key-value map of additional details to attach to the test matrix.( clientDetails in Google Cloud Docs ) Arbitrary key-value pairs may be attached to a test matrix to provide additional context about the tests being run. When consuming the test results, such as in Cloud Functions or a CI system, these details can add additional context such as a link to the corresponding pull request. ( Access Client Details )","title":"clientDetails"},{"location":"configuration/#otherfiles","text":"A list of device-path: file-path pairs that indicate the device paths to push files to the device before starting tests, and the paths of files to push. Device paths must be under absolute, whitelisted paths (${EXTERNAL_STORAGE}, or ${ANDROID_DATA}/local/tmp). Source file paths may be in the local filesystem or in Google Cloud Storage (gs://\u2026).","title":"otherFiles"},{"location":"configuration/#networkprofile","text":"The name of the network traffic profile, for example LTE, HSPA, etc, which consists of a set of parameters to emulate network conditions when running the test (default: no network shaping; see available profiles listed by the flank test network-profiles list command). This feature only works on physical devices.","title":"networkProfile"},{"location":"configuration/#roboscript","text":"The path to a Robo Script JSON file. The path may be in the local filesystem or in Google Cloud Storage using gs:// notation. You can guide the Robo test to perform specific actions by recording a Robo Script in Android Studio and then specifying this argument. Learn more at DOCS .","title":"roboScript"},{"location":"configuration/#robodirectives","text":"List of robo_directives that you can use to customize the behavior of Robo test. The type specifies the action type of the directive, which may take on values click, text or ignore. Each directive is list of String = [type, key, value]. Each key should be the Android resource name of a target UI element and each value should be the text input for that element. Values are only permitted for text type elements, so no value should be specified for click and ignore type elements.","title":"roboDirectives"},{"location":"configuration/#outputstyle","text":"Output style of execution status. May be one of [ verbose , multi , single ]. For runs with only one test execution the default value is 'verbose', in other cases 'multi' is used as the default. The output style 'multi' is not displayed correctly on consoles which don't support ansi codes, to avoid corrupted output use single or verbose. multi displays separated status for each shard execution in separated line, lines are updated over time. Similar to gradle output when running multiple tasks in parallel. Requires ANSI codes support. single displays shortened status of all executions in single line. Similar to gcloud output when running with sharding. Should work on any console. Default value is single. Groovy outputSyle = \"single\" Kotlin outputStyle . set ( \"single\" )","title":"outputStyle"},{"location":"faq/","text":"FAQ Error APK file not found The app APK and the instrumentation APK are expected to have already been generated before calling runFlank. If you would like the flank task to automatically create the APKs, you can add the following to your application's build.gradle. afterEvaluate { tasks.named(\"execFlank\").configure { dependsOn(\"assembleDebugAndroidTest\") } } See https://issuetracker.google.com/issues/152240037 for more information. No signature of method If you receive an error like this, it is likely caused by invalid fladle extension confiuration. The syntax was changed in the 0.9.X releases in order to avoid touching files during the configuration phase. No signature of method: flank_4vvjv7w3oopge32w1tl9cs6e4.fladle () is applicable for argument types: ( flank_4vvjv7w3oopge32w1tl9cs6e4 $_run_closure1 ) values: [ flank_4vvjv7w3oopge32w1tl9cs6e4 $_run_closure1 @649a2315 ] Possible solutions: file ( java.lang.Object ) , find () , findAll () , file ( java.lang.Object, org.gradle.api.PathValidation ) , files ([ Ljava.lang.Object ; ) , findAll ( groovy.lang.Closure ) If you receive a similar error, please check configuration for a sample configuration. Debugging ./gradlew runFlank -PdumpShards Will dump shards and exit the process without running the tests. ./gradlew printYml Will print out the current yaml configuration to be passed to Flank. More help? Still having trouble? Check the #flank channel in the Firebase Community Slack","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#error-apk-file-not-found","text":"The app APK and the instrumentation APK are expected to have already been generated before calling runFlank. If you would like the flank task to automatically create the APKs, you can add the following to your application's build.gradle. afterEvaluate { tasks.named(\"execFlank\").configure { dependsOn(\"assembleDebugAndroidTest\") } } See https://issuetracker.google.com/issues/152240037 for more information.","title":"Error APK file not found"},{"location":"faq/#no-signature-of-method","text":"If you receive an error like this, it is likely caused by invalid fladle extension confiuration. The syntax was changed in the 0.9.X releases in order to avoid touching files during the configuration phase. No signature of method: flank_4vvjv7w3oopge32w1tl9cs6e4.fladle () is applicable for argument types: ( flank_4vvjv7w3oopge32w1tl9cs6e4 $_run_closure1 ) values: [ flank_4vvjv7w3oopge32w1tl9cs6e4 $_run_closure1 @649a2315 ] Possible solutions: file ( java.lang.Object ) , find () , findAll () , file ( java.lang.Object, org.gradle.api.PathValidation ) , files ([ Ljava.lang.Object ; ) , findAll ( groovy.lang.Closure ) If you receive a similar error, please check configuration for a sample configuration.","title":"No signature of method"},{"location":"faq/#debugging","text":"./gradlew runFlank -PdumpShards Will dump shards and exit the process without running the tests. ./gradlew printYml Will print out the current yaml configuration to be passed to Flank.","title":"Debugging"},{"location":"faq/#more-help","text":"Still having trouble? Check the #flank channel in the Firebase Community Slack","title":"More help?"},{"location":"multi-module-testing/","text":"Multi-module testing Multi module testing can be done by manually specifying additionalTestApks or applying the Fulladle plugin to automacally gather all the additional test apks. Fulladle Plugin Warning Fulladle is still under development and is not guaranteed to work and may change at any moment. Apply the Fulladle plugin at the root of the project. Groovy plugins { id 'com.osacky.fulladle' version '0.10.2' } Kotlin plugins { id ' com . osacky . fulladle ' version ' 0.10 . 2 ' } Configure the Fladle extension. Groovy fladle { serviceAccountCredentials = project . layout . projectDirectory . file ( \"flank-gradle-service-account.json\" ) } Kotlin fladle { serviceAccountCredentials . set ( project . layout . projectDirectory . file ( \"flank-gradle-service-account.json\" )) } Warning If using buildFlavors or testing against a non default variant, Fulladle might not test the variant you are expecting. Run the tests. First assemble all your debug apks and test apks. ./gradlew assembleDebug assembleDebugAndroidTest Note When using flavors, make sure to assemble your buildVariants as well. ./gradlew :app:assembleFreeDebug :app:assembleFreeDebugAndroidTest Run Flank! ./gradlew runFlank Troubleshooting Fulladle isn't ready yet, but we'd love feedback. Please join us in the Firebase Community Slack with any feedback you may have. You can also file Fladle Github issues . When filing a bug report, please include the Flank version number, the Fladle version number and the output of the following: ./gradlew printYml ./gradlew runFlank -PdumpShards","title":"Multi Module Testing"},{"location":"multi-module-testing/#multi-module-testing","text":"Multi module testing can be done by manually specifying additionalTestApks or applying the Fulladle plugin to automacally gather all the additional test apks.","title":"Multi-module testing"},{"location":"multi-module-testing/#fulladle-plugin","text":"Warning Fulladle is still under development and is not guaranteed to work and may change at any moment. Apply the Fulladle plugin at the root of the project. Groovy plugins { id 'com.osacky.fulladle' version '0.10.2' } Kotlin plugins { id ' com . osacky . fulladle ' version ' 0.10 . 2 ' } Configure the Fladle extension. Groovy fladle { serviceAccountCredentials = project . layout . projectDirectory . file ( \"flank-gradle-service-account.json\" ) } Kotlin fladle { serviceAccountCredentials . set ( project . layout . projectDirectory . file ( \"flank-gradle-service-account.json\" )) } Warning If using buildFlavors or testing against a non default variant, Fulladle might not test the variant you are expecting. Run the tests. First assemble all your debug apks and test apks. ./gradlew assembleDebug assembleDebugAndroidTest Note When using flavors, make sure to assemble your buildVariants as well. ./gradlew :app:assembleFreeDebug :app:assembleFreeDebugAndroidTest Run Flank! ./gradlew runFlank","title":"Fulladle Plugin"},{"location":"multi-module-testing/#troubleshooting","text":"Fulladle isn't ready yet, but we'd love feedback. Please join us in the Firebase Community Slack with any feedback you may have. You can also file Fladle Github issues . When filing a bug report, please include the Flank version number, the Fladle version number and the output of the following: ./gradlew printYml ./gradlew runFlank -PdumpShards","title":"Troubleshooting"},{"location":"quick-start/","text":"Quick Start Using Fladle takes 3 steps: Apply the Fladle plugin. Follow instructions here Root build.gradle Groovy buildscript { dependencies { classpath \"com.osacky.flank.gradle:fladle:0.10.2\" } } Kotlin buildscript { dependencies { classpath ( \"com.osacky.flank.gradle:fladle:0.10.2\" ) } } Application module build.gradle Groovy apply plugin: \"com.android.application\" apply plugin: \"com.osacky.fladle\" Kotlin plugins { id ( \"com.android.application\" ) id ( \"com.osacky.fladle\" ) } Configure the Fladle extension. Groovy fladle { serviceAccountCredentials = project . layout . projectDirectory . file ( \"flank-gradle-service-account.json\" ) } Kotlin fladle { serviceAccountCredentials . set ( project . layout . projectDirectory . file ( \"flank-gradle-service-account.json\" )) } Warning If using buildFlavors or testing against a non default variant, variant must also configured Run your tests! First assemble your debug apk and test apk. ./gradlew :app:assembleDebug :app:assembleDebugAndroidTest Note When using flavors, make sure to assemble your buildVariants. ./gradlew :app:assembleFreeDebug :app:assembleFreeDebugAndroidTest Run Flank! ./gradlew runFlank","title":"Quick Start"},{"location":"quick-start/#quick-start","text":"Using Fladle takes 3 steps: Apply the Fladle plugin. Follow instructions here Root build.gradle Groovy buildscript { dependencies { classpath \"com.osacky.flank.gradle:fladle:0.10.2\" } } Kotlin buildscript { dependencies { classpath ( \"com.osacky.flank.gradle:fladle:0.10.2\" ) } } Application module build.gradle Groovy apply plugin: \"com.android.application\" apply plugin: \"com.osacky.fladle\" Kotlin plugins { id ( \"com.android.application\" ) id ( \"com.osacky.fladle\" ) } Configure the Fladle extension. Groovy fladle { serviceAccountCredentials = project . layout . projectDirectory . file ( \"flank-gradle-service-account.json\" ) } Kotlin fladle { serviceAccountCredentials . set ( project . layout . projectDirectory . file ( \"flank-gradle-service-account.json\" )) } Warning If using buildFlavors or testing against a non default variant, variant must also configured Run your tests! First assemble your debug apk and test apk. ./gradlew :app:assembleDebug :app:assembleDebugAndroidTest Note When using flavors, make sure to assemble your buildVariants. ./gradlew :app:assembleFreeDebug :app:assembleFreeDebugAndroidTest Run Flank! ./gradlew runFlank","title":"Quick Start"},{"location":"releasing/","text":"Releasing Create a local release branch from master git checkout master git pull git checkout -b release_0.10.3 Update version in buildSrc/build.gradle.kts (remove -SNAPSHOT ) version = \"0.10.3\" Update the current version and next version in mkdocs.yml : extra: fladle: release: '0.10.3' next_release: 'REPLACE_WITH_NEXT_VERSION_NUMBER' Take one last look git diff Commit all local changes git commit -am \"Prepare 0.10.3 release\" Create a tag and push it git tag v0.10.3 git push origin v0.10.3 Upload to Maven Central ./gradlew -b buildSrc/build.gradle.kts publishAllPublicationsToMavenRepository -Pfladle.releaseMode -Dorg.gradle.internal.publish.checksums.insecure = true Upload to Gradle Plugin Portal ./gradlew -b buildSrc/build.gradle.kts publishPlugins -Pfladle.releaseMode -Dorg.gradle.internal.publish.checksums.insecure = true Release to Maven Central Login to Sonatype OSS Nexus: https://oss.sonatype.org/ Click on Staging Repositories Merge the release branch to master git checkout master git pull git merge --no-ff release_0.10.3 Update version in buildSrc/build.gradle.kts (increase version and add -SNAPSHOT ) version = \"REPLACE_WITH_NEXT_VERSION_NUMBER-SNAPSHOT\" Commit your changes git commit -am \"Prepare for next development iteration\" Push your changes git push","title":"Releasing"},{"location":"releasing/#releasing","text":"Create a local release branch from master git checkout master git pull git checkout -b release_0.10.3 Update version in buildSrc/build.gradle.kts (remove -SNAPSHOT ) version = \"0.10.3\" Update the current version and next version in mkdocs.yml : extra: fladle: release: '0.10.3' next_release: 'REPLACE_WITH_NEXT_VERSION_NUMBER' Take one last look git diff Commit all local changes git commit -am \"Prepare 0.10.3 release\" Create a tag and push it git tag v0.10.3 git push origin v0.10.3 Upload to Maven Central ./gradlew -b buildSrc/build.gradle.kts publishAllPublicationsToMavenRepository -Pfladle.releaseMode -Dorg.gradle.internal.publish.checksums.insecure = true Upload to Gradle Plugin Portal ./gradlew -b buildSrc/build.gradle.kts publishPlugins -Pfladle.releaseMode -Dorg.gradle.internal.publish.checksums.insecure = true Release to Maven Central Login to Sonatype OSS Nexus: https://oss.sonatype.org/ Click on Staging Repositories Merge the release branch to master git checkout master git pull git merge --no-ff release_0.10.3 Update version in buildSrc/build.gradle.kts (increase version and add -SNAPSHOT ) version = \"REPLACE_WITH_NEXT_VERSION_NUMBER-SNAPSHOT\" Commit your changes git commit -am \"Prepare for next development iteration\" Push your changes git push","title":"Releasing"},{"location":"results/","text":"Results By default, results are placed in the build/fladle/results/<matrix name> directly. A merged junit report is available in JUnitReport.xml On failures only, an html report with links to failed shards is also generated in the results directory with the name HtmlErrorReport.html . A cost report is also available CostReport.txt .","title":"Results"},{"location":"results/#results","text":"By default, results are placed in the build/fladle/results/<matrix name> directly. A merged junit report is available in JUnitReport.xml On failures only, an html report with links to failed shards is also generated in the results directory with the name HtmlErrorReport.html . A cost report is also available CostReport.txt .","title":"Results"},{"location":"snapshots/","text":"Testing Snapshot Releases To test the Fladle snapshot release you have two options: Traditional Root build.gradle buildscript { repositories { maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" } } dependencies { classpath \"com.osacky.flank.gradle:fladle:0.10.3-SNAPSHOT\" } } Project build.gradle apply plugin: \"com.osacky.fladle\" Plugin Management settings.gradle pluginManagement { repositories { maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" } gradlePluginPortal () } } Android application build.gradle plugins { id \"com.osacky.fladle\" version \"0.10.3-SNAPSHOT\" }","title":"Testing Snapshots"},{"location":"snapshots/#testing-snapshot-releases","text":"To test the Fladle snapshot release you have two options:","title":"Testing Snapshot Releases"},{"location":"snapshots/#traditional","text":"Root build.gradle buildscript { repositories { maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" } } dependencies { classpath \"com.osacky.flank.gradle:fladle:0.10.3-SNAPSHOT\" } } Project build.gradle apply plugin: \"com.osacky.fladle\"","title":"Traditional"},{"location":"snapshots/#plugin-management","text":"settings.gradle pluginManagement { repositories { maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" } gradlePluginPortal () } } Android application build.gradle plugins { id \"com.osacky.fladle\" version \"0.10.3-SNAPSHOT\" }","title":"Plugin Management"}]}